{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c! \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0418\u0422\u041c\u041e \u0414\u0430\u043d\u0438\u0438\u043b\u0430 \u0422\u0430\u044f\u043a\u0438\u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33392.","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!"},{"location":"#_1","text":"\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0418\u0422\u041c\u041e \u0414\u0430\u043d\u0438\u0438\u043b\u0430 \u0422\u0430\u044f\u043a\u0438\u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33392.","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!"},{"location":"lab-1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #1 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 C\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439 : \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 : \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. \u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d : \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438 : \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 . \u251c\u2500\u2500 alembic.ini \u251c\u2500\u2500 database.py \u251c\u2500\u2500 dependencies \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u2514\u2500\u2500 hashing.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u251c\u2500\u2500 models.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 routers \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 books.py \u2502 \u251c\u2500\u2500 boxes.py \u2502 \u251c\u2500\u2500 crossings.py \u2502 \u251c\u2500\u2500 tags.py \u2502 \u2514\u2500\u2500 users.py \u2514\u2500\u2500 schemas.py \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u0435\u0440\u0435\u0434 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0441\u0430\u043c\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0431\u044b\u043b\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e \u0441\u0432\u044f\u0437\u044f\u043c\u0438 many-to-many \u0438 one-to-many. \u0414\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u044b\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 SQLAlchemy. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043a\u043d\u0438\u0433\u0438 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438. \u0423 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0441 \u0442\u044d\u0433\u0430\u043c\u0438. class Book(Base): __tablename__ = \"books\" id = Column(Integer, primary_key=True) name = Column(String, index=True) author = Column(String, index=True) description = Column(String, index=True) tags = relationship(\"Tag\", secondary=\"books_tags\") \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0412\u0430\u0436\u043d\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u043f\u043e\u043b\u0435 email \u0431\u0443\u0434\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c. \u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c. \u041f\u043e\u043b\u0435 registration_date \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f. class User(Base): __tablename__ = \"users\" id = Column(Integer, primary_key=True) email = Column(String, unique=True, index=True) hashed_password = Column(String) first_name = Column(String, index=True) last_name = Column(String, index=True) is_active = Column(Boolean, default=True) registration_date = Column(DateTime(timezone=True), server_default=func.now()) books = relationship(Book, secondary=\"book_ownership\") \u0422\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0431\u0443\u043a\u043a\u0440\u043e\u0441\u0438\u043d\u0433\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u043a\u0438\u0435 \u0431\u043e\u043a\u0441\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433. class Box(Base): __tablename__ = \"boxes\" id = Column(Integer, primary_key=True) name = Column(String, index=True) address = Column(String, index=True) \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0442\u044d\u0433\u043e\u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. class Tag(Base): __tablename__ = \"tags\" id = Column(Integer, primary_key=True) name = Column(String, index=True) description = Column(String, index=True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043c\u044b \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043d\u0438\u0433\u0438 \u0438 \u0442\u044d\u0433\u0438, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u044f \u0441\u0432\u044f\u0437\u044c many-to-many. class BooksTags(Base): __tablename__ = \"books_tags\" book_id = Column(Integer, ForeignKey('books.id'), primary_key = True) tag_id = Column(Integer, ForeignKey('tags.id'), primary_key = True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043c\u044b \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. class BookOwnership(Base): __tablename__ = \"book_ownership\" user_id = Column(Integer, ForeignKey('users.id'), primary_key = True) book_id = Column(Integer, ForeignKey('books.id'), primary_key = True) edition_year = Column(Integer) condition = Column(SQLEnum(BookConditionEnum)) \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0430\u043c\u0438\u0445 \u043a\u0440\u043e\u0441\u0441\u0438\u043d\u0433\u043e\u0432 (\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433). class Crossing(Base): __tablename__ = \"crossings\" id = Column(Integer, primary_key=True) available_book_id = Column(Integer, ForeignKey('books.id')) owner_id = Column(Integer, ForeignKey('users.id')) recepient_id = Column(Integer, ForeignKey('users.id')) box_id = Column(Integer, ForeignKey('boxes.id')) created_at = Column(DateTime(timezone=True), server_default=func.now()) book = relationship(\"Book\", foreign_keys=[available_book_id]) owner = relationship(\"User\", foreign_keys=[owner_id]) recepient = relationship(\"User\", foreign_keys=[recepient_id]) box = relationship(\"Box\", foreign_keys=[box_id]) API \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 CRUD, \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043a\u043d\u0438\u0433\u0438. \u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u043c APIRouter . \u041f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441 /books , \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432. router = APIRouter(prefix=\"/books\") \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 pydentic, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. class BookBase(BaseModel): name: str author: str description: str class BookCreate(BookBase): tag_ids: list[int] pass class BookRead(BookBase): id: int tags: list[TagRead] = [] class Config: orm_mode = True \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 POST \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442. @router.post(\"/\", response_model=BookRead) def create_book(book: BookCreate, db = Depends(get_session)) -> BookRead: tag_ids = book.tag_ids del book.tag_ids db_book = Book(**book.model_dump()) db.add(db_book) db.commit() db.refresh(db_book) for tag_id in tag_ids: db_books_tags = BooksTags(book_id=db_book.id, tag_id=tag_id) db.add(db_books_tags) db.commit() return db_book \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433, \u0434\u0430\u043d\u043d\u044b\u0439 \u044d\u0434\u043d\u043f\u043e\u0438\u043d\u0442. @router.get(\"/\", response_model=list[BookRead]) def list_books(skip: int = 0, limit: int = 100, db = Depends(get_session)): books = db.query(Book).offset(skip).limit(limit).all() return books \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e id. @router.get(\"/{book_id}\", response_model=BookRead) def read_book(book_id: int, db = Depends(get_session)) -> BookRead: book = db.query(Book).filter(Book.id == book_id).first() if not book: raise HTTPException(status_code=HTTPStatus.NOT_FOUND, detail=\"The book was not found\") return book \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. @router.put(\"/{book_id}\", response_model=BookRead) def update_book(book_id: int, updated_book: BookCreate, db = Depends(get_session)) -> BookRead: tag_ids = updated_book.tag_ids del updated_book.tag_ids book = db.query(Book).filter(Book.id == book_id).first() if not book: raise HTTPException(status_code=HTTPStatus.NOT_FOUND, detail=\"The book was not found\") db.query(Book).filter(Book.id == book_id).update(updated_book.dict(exclude_unset=True), synchronize_session=False) db.commit() db.refresh(book) db.query(BooksTags).filter(BooksTags.book_id == book_id).delete(synchronize_session=False) for tag_id in tag_ids: db_books_tags = BooksTags(book_id=book_id, tag_id=tag_id) db.add(db_books_tags) db.commit() return book \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438. @router.delete(\"/{book_id}\", response_model=DeleteResponse) def delete_book(book_id: int, db = Depends(get_session)) -> DeleteResponse: book = db.query(Book).filter(Book.id == book_id).first() if not book: raise HTTPException(status_code=HTTPStatus.NOT_FOUND, detail=\"The book was not found\") db.delete(book) db.commit() return DeleteResponse(message=\"The book was deleted successfully\") JWT \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: pyjwt , passlib . \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0445\u044d\u0448\u0438\u0440\u0432\u043e\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 HS256 , \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. from passlib.context import CryptContext pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") def verify_password(plain_password, hashed_password) -> bool: return pwd_context.verify(plain_password, hashed_password) def hash_password(plain_password) -> str: return pwd_context.hash(plain_password) \u041d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u0435 \u043a\u043e\u0434\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f JWT-\u0442\u043e\u043a\u0435\u043d\u0430. import os from dotenv import load_dotenv from jose import jwt from datetime import datetime, timedelta, timezone load_dotenv() def create_access_token(data: dict, expires_delta: timedelta | None = None): to_encode = data.copy() if expires_delta: expire = datetime.now(timezone.utc) + expires_delta else: expire = datetime.now(timezone.utc) + timedelta(minutes=15) to_encode.update({\"exp\": expire}) encoded_jwt = jwt.encode(to_encode, os.environ[\"JWT_SECRET_KEY\"], algorithm=\"HS256\") return encoded_jwt \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u0435\u0434\u0435\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0435\u0439 JWT-\u0442\u043e\u043a\u0435\u043d\u0430. @router.post(\"\") async def login_for_access_token( form_data: OAuth2PasswordRequestForm = Depends(), db = Depends(get_session) ) -> Token: def authenticate_user(db, email: str, password: str): user = db.query(User).filter(User.email == email).first() if not user: return False if not verify_password(password, user.hashed_password): return False return user user = authenticate_user(db, form_data.username, form_data.password) if not user: raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Incorrect username or password\", headers={\"WWW-Authenticate\": \"Bearer\"}, ) access_token_expires = timedelta(minutes=30) access_token = create_access_token( data={\"sub\": user.email}, expires_delta=access_token_expires ) return Token(access_token=access_token, token_type=\"bearer\") \u0417\u0434\u0435\u0441\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 JWT-\u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. async def get_current_user(token: str = Depends(oauth2_scheme), db = Depends(get_session)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", headers={\"WWW-Authenticate\": \"Bearer\"}, ) try: payload = jwt.decode(token, os.environ[\"JWT_SECRET_KEY\"], algorithms=[\"HS256\"]) username: str = payload.get(\"sub\") if username is None: raise credentials_exception token_data = TokenData(username=username) except JWTError: raise credentials_exception user = db.query(User).filter(User.email == token_data.username).first() if user is None: raise credentials_exception return user Alembic \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0411\u0414 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 alembic alembic init migrations & alembic upgrade head","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #1"},{"location":"lab-1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #1"},{"location":"lab-1/#_1","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab-1/#_2","text":"C\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439 : \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 : \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. \u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d : \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438 : \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab-1/#_3","text":". \u251c\u2500\u2500 alembic.ini \u251c\u2500\u2500 database.py \u251c\u2500\u2500 dependencies \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u2514\u2500\u2500 hashing.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u251c\u2500\u2500 models.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 routers \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 books.py \u2502 \u251c\u2500\u2500 boxes.py \u2502 \u251c\u2500\u2500 crossings.py \u2502 \u251c\u2500\u2500 tags.py \u2502 \u2514\u2500\u2500 users.py \u2514\u2500\u2500 schemas.py","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab-1/#_4","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab-1/#_5","text":"\u041f\u0435\u0440\u0435\u0434 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0441\u0430\u043c\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0431\u044b\u043b\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e \u0441\u0432\u044f\u0437\u044f\u043c\u0438 many-to-many \u0438 one-to-many. \u0414\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u044b\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 SQLAlchemy. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043a\u043d\u0438\u0433\u0438 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438. \u0423 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0441 \u0442\u044d\u0433\u0430\u043c\u0438. class Book(Base): __tablename__ = \"books\" id = Column(Integer, primary_key=True) name = Column(String, index=True) author = Column(String, index=True) description = Column(String, index=True) tags = relationship(\"Tag\", secondary=\"books_tags\") \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0412\u0430\u0436\u043d\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u043f\u043e\u043b\u0435 email \u0431\u0443\u0434\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c. \u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c. \u041f\u043e\u043b\u0435 registration_date \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f. class User(Base): __tablename__ = \"users\" id = Column(Integer, primary_key=True) email = Column(String, unique=True, index=True) hashed_password = Column(String) first_name = Column(String, index=True) last_name = Column(String, index=True) is_active = Column(Boolean, default=True) registration_date = Column(DateTime(timezone=True), server_default=func.now()) books = relationship(Book, secondary=\"book_ownership\") \u0422\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0431\u0443\u043a\u043a\u0440\u043e\u0441\u0438\u043d\u0433\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u043a\u0438\u0435 \u0431\u043e\u043a\u0441\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433. class Box(Base): __tablename__ = \"boxes\" id = Column(Integer, primary_key=True) name = Column(String, index=True) address = Column(String, index=True) \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0442\u044d\u0433\u043e\u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. class Tag(Base): __tablename__ = \"tags\" id = Column(Integer, primary_key=True) name = Column(String, index=True) description = Column(String, index=True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043c\u044b \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043d\u0438\u0433\u0438 \u0438 \u0442\u044d\u0433\u0438, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u044f \u0441\u0432\u044f\u0437\u044c many-to-many. class BooksTags(Base): __tablename__ = \"books_tags\" book_id = Column(Integer, ForeignKey('books.id'), primary_key = True) tag_id = Column(Integer, ForeignKey('tags.id'), primary_key = True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043c\u044b \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. class BookOwnership(Base): __tablename__ = \"book_ownership\" user_id = Column(Integer, ForeignKey('users.id'), primary_key = True) book_id = Column(Integer, ForeignKey('books.id'), primary_key = True) edition_year = Column(Integer) condition = Column(SQLEnum(BookConditionEnum)) \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0430\u043c\u0438\u0445 \u043a\u0440\u043e\u0441\u0441\u0438\u043d\u0433\u043e\u0432 (\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433). class Crossing(Base): __tablename__ = \"crossings\" id = Column(Integer, primary_key=True) available_book_id = Column(Integer, ForeignKey('books.id')) owner_id = Column(Integer, ForeignKey('users.id')) recepient_id = Column(Integer, ForeignKey('users.id')) box_id = Column(Integer, ForeignKey('boxes.id')) created_at = Column(DateTime(timezone=True), server_default=func.now()) book = relationship(\"Book\", foreign_keys=[available_book_id]) owner = relationship(\"User\", foreign_keys=[owner_id]) recepient = relationship(\"User\", foreign_keys=[recepient_id]) box = relationship(\"Box\", foreign_keys=[box_id])","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab-1/#api","text":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 CRUD, \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043a\u043d\u0438\u0433\u0438. \u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u043c APIRouter . \u041f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441 /books , \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432. router = APIRouter(prefix=\"/books\") \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 pydentic, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. class BookBase(BaseModel): name: str author: str description: str class BookCreate(BookBase): tag_ids: list[int] pass class BookRead(BookBase): id: int tags: list[TagRead] = [] class Config: orm_mode = True \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 POST \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442. @router.post(\"/\", response_model=BookRead) def create_book(book: BookCreate, db = Depends(get_session)) -> BookRead: tag_ids = book.tag_ids del book.tag_ids db_book = Book(**book.model_dump()) db.add(db_book) db.commit() db.refresh(db_book) for tag_id in tag_ids: db_books_tags = BooksTags(book_id=db_book.id, tag_id=tag_id) db.add(db_books_tags) db.commit() return db_book \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433, \u0434\u0430\u043d\u043d\u044b\u0439 \u044d\u0434\u043d\u043f\u043e\u0438\u043d\u0442. @router.get(\"/\", response_model=list[BookRead]) def list_books(skip: int = 0, limit: int = 100, db = Depends(get_session)): books = db.query(Book).offset(skip).limit(limit).all() return books \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e id. @router.get(\"/{book_id}\", response_model=BookRead) def read_book(book_id: int, db = Depends(get_session)) -> BookRead: book = db.query(Book).filter(Book.id == book_id).first() if not book: raise HTTPException(status_code=HTTPStatus.NOT_FOUND, detail=\"The book was not found\") return book \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. @router.put(\"/{book_id}\", response_model=BookRead) def update_book(book_id: int, updated_book: BookCreate, db = Depends(get_session)) -> BookRead: tag_ids = updated_book.tag_ids del updated_book.tag_ids book = db.query(Book).filter(Book.id == book_id).first() if not book: raise HTTPException(status_code=HTTPStatus.NOT_FOUND, detail=\"The book was not found\") db.query(Book).filter(Book.id == book_id).update(updated_book.dict(exclude_unset=True), synchronize_session=False) db.commit() db.refresh(book) db.query(BooksTags).filter(BooksTags.book_id == book_id).delete(synchronize_session=False) for tag_id in tag_ids: db_books_tags = BooksTags(book_id=book_id, tag_id=tag_id) db.add(db_books_tags) db.commit() return book \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438. @router.delete(\"/{book_id}\", response_model=DeleteResponse) def delete_book(book_id: int, db = Depends(get_session)) -> DeleteResponse: book = db.query(Book).filter(Book.id == book_id).first() if not book: raise HTTPException(status_code=HTTPStatus.NOT_FOUND, detail=\"The book was not found\") db.delete(book) db.commit() return DeleteResponse(message=\"The book was deleted successfully\")","title":"API"},{"location":"lab-1/#jwt","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: pyjwt , passlib . \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0445\u044d\u0448\u0438\u0440\u0432\u043e\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 HS256 , \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. from passlib.context import CryptContext pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") def verify_password(plain_password, hashed_password) -> bool: return pwd_context.verify(plain_password, hashed_password) def hash_password(plain_password) -> str: return pwd_context.hash(plain_password) \u041d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u0435 \u043a\u043e\u0434\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f JWT-\u0442\u043e\u043a\u0435\u043d\u0430. import os from dotenv import load_dotenv from jose import jwt from datetime import datetime, timedelta, timezone load_dotenv() def create_access_token(data: dict, expires_delta: timedelta | None = None): to_encode = data.copy() if expires_delta: expire = datetime.now(timezone.utc) + expires_delta else: expire = datetime.now(timezone.utc) + timedelta(minutes=15) to_encode.update({\"exp\": expire}) encoded_jwt = jwt.encode(to_encode, os.environ[\"JWT_SECRET_KEY\"], algorithm=\"HS256\") return encoded_jwt \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u0435\u0434\u0435\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0435\u0439 JWT-\u0442\u043e\u043a\u0435\u043d\u0430. @router.post(\"\") async def login_for_access_token( form_data: OAuth2PasswordRequestForm = Depends(), db = Depends(get_session) ) -> Token: def authenticate_user(db, email: str, password: str): user = db.query(User).filter(User.email == email).first() if not user: return False if not verify_password(password, user.hashed_password): return False return user user = authenticate_user(db, form_data.username, form_data.password) if not user: raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Incorrect username or password\", headers={\"WWW-Authenticate\": \"Bearer\"}, ) access_token_expires = timedelta(minutes=30) access_token = create_access_token( data={\"sub\": user.email}, expires_delta=access_token_expires ) return Token(access_token=access_token, token_type=\"bearer\") \u0417\u0434\u0435\u0441\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 JWT-\u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. async def get_current_user(token: str = Depends(oauth2_scheme), db = Depends(get_session)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", headers={\"WWW-Authenticate\": \"Bearer\"}, ) try: payload = jwt.decode(token, os.environ[\"JWT_SECRET_KEY\"], algorithms=[\"HS256\"]) username: str = payload.get(\"sub\") if username is None: raise credentials_exception token_data = TokenData(username=username) except JWTError: raise credentials_exception user = db.query(User).filter(User.email == token_data.username).first() if user is None: raise credentials_exception return user","title":"JWT"},{"location":"lab-1/#alembic","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0411\u0414 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 alembic alembic init migrations & alembic upgrade head","title":"Alembic"},{"location":"lab-2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0417\u0430\u0434\u0430\u0447\u0430 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 calculate_sum \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442 \u0447\u0430\u0441\u043b\u0430 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u0432 sum_multi \u0438 sum_async \u043d\u0435\u0442 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0430\u0433\u0440\u0443\u043c\u0435\u043d\u0442\u0430 result, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f total . def calculate_sum(start, end, result): total = 0 for i in range(start, end): total += i result.append(total) Threading \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u043c \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u043e\u0442\u0440\u0435\u0437\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0414\u0430\u043b\u0435\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (10^5). \u041a\u0430\u0436\u0434\u044b\u0439 \u0447\u0430\u043d\u043a \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. \u0410 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a result , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. def main(): result = [] threads = [] chunk_size = 10**5 for i in range(0, 10**6, chunk_size): t = Thread(target=calculate_sum, args=(i+1, i+chunk_size+1, result)) threads.append(t) t.start() for t in threads: t.join() print(\"Result of sum:\", sum(result)) Multiprocessing \u0422\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043c\u044b \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (10^5). \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0443\u043b, \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0440\u0430\u0432\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0447\u0430\u043d\u043a\u043e\u0432. \u0414\u0430\u043b\u0435\u0435, \u0432 \u043f\u0443\u043b\u0435 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 calculate_sum \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a result . def main(): chunk_size = 10**5 pool = Pool(processes=10**6 // chunk_size) result = [pool.apply(calculate_sum, (i+1, i+chunk_size+1)) for i in range(0, 10**6, chunk_size)] print(\"Result of sum:\", sum(result)) Asyncio \u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c calculate_sum \u043a\u0430\u043a \u043a\u043e\u0440\u043e\u0442\u0438\u043d\u0443. \u0417\u0430\u0442\u0435\u043c, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0430\u043d\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c Task \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u043e\u0436\u0438\u0434\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0414\u0430\u043b\u0435\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): tasks = [] chunk_size = 10**5 for i in range(0, 10**6, chunk_size): task = asyncio.create_task(calculate_sum(i+1, i+chunk_size+1)) tasks.append(task) result = await asyncio.gather(*tasks) print(\"Result of sum:\", sum(result)) Benchmark \u041d\u0430\u043f\u0438\u0448\u0435\u043c benchmark \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0430\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434. def benchmark(func, name): start_time = time.perf_counter() func() end_time = time.perf_counter() print(f\"{name} ended in {end_time - start_time:.4f} seconds\") \u0414\u0430\u043b\u0435\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c benchmark \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430. if __name__ == \"__main__\": benchmark(threading_main, \"Threading\") benchmark(multi_main, \"Multiprocessing\") benchmark(partial(asyncio.run, async_main()), \"Asyncio\") \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435. Result of sum: 500000500000 Threading ended in 0.0294 seconds Result of sum: 500000500000 Multiprocessing ended in 0.1709 seconds Result of sum: 500000500000 Asyncio ended in 0.0272 seconds \u0421\u0430\u043c\u044b\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f multiprocessing . \u0417\u0430\u0434\u0430\u0447\u0430 2 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0435\u0441\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0441\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043a\u043d\u0438\u0433. class AbstractParser(ABC): base_url: str @abstractmethod def parse(self) -> list[Book]: ... @abstractmethod async def async_parse(self) -> list[Book]: ... \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0440\u0435\u0441\u0443\u0440\u0441\u0430. class BaseParser(AbstractParser): base_url: str def get_soup(self) -> BeautifulSoup: return BeautifulSoup(requests.get(self.base_url).text, \"html.parser\") async def async_get_soup(self) -> BeautifulSoup: async with aiohttp.ClientSession() as client: async with client.get(self.base_url) as resp: return BeautifulSoup(await resp.read(), \"html.parser\") def parse(self) -> list[Book]: return self._parse(self.get_soup()) async def async_parse(self) -> list[Book]: return self._parse(await self.async_get_soup()) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043a\u043d\u0438\u0433 \u0441 \u0441\u0430\u0439\u0442\u0430 \u041b\u0430\u0431\u0438\u0440\u0438\u0442 . class LabirintParser(BaseParser): def __init__(self): self.base_url = \"https://www.labirint.ru/books/\" def _parse(self, soup: BeautifulSoup): el = soup.find_all(\"div\", class_=\"product\", attrs={\"data-sgenre-name\": \"\u043a\u043d\u0438\u0433\u0430\"} ) parsed_books = [] for book in el: name = book[\"data-name\"] div_author = book.find(\"div\", class_=\"product-author\") if not div_author: continue author = div_author.find(\"a\")[\"title\"] description = book[\"data-first-genre-name\"] parsed_books.append( Book(name=name, author=author, description=description) ) return parsed_books \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043a\u043d\u0438\u0433 \u0441 \u0441\u0430\u0439\u0442\u0430 Book24 . class Book24Parser(BaseParser): def __init__(self): self.base_url = \"https://book24.ru/knigi-bestsellery/\" def _parse(self, soup: BeautifulSoup): el = soup.find_all(\"div\", class_=\"product-card__content\") parsed_books = [] for book in el: name = book.find(\"a\")[\"title\"] a_author = book.find(\"a\", class_=\"author-list__item smartLink\") if not a_author: continue author = a_author.text parsed_books.append( Book(name=name, author=author) ) return parsed_books Threading \u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. import threading from conn import get_session, init_db from parser import AbstractParser, LabirintParser, Book24Parser def parse_with_db_save(parser: AbstractParser, session): parsed_data = parser.parse() for d in parsed_data: session.add(d) session.commit() def main(): labirint_parser = LabirintParser() book24_parser = Book24Parser() session = next(get_session()) thread1 = threading.Thread(target=parse_with_db_save, args=(labirint_parser, session)) thread2 = threading.Thread(target=parse_with_db_save, args=(book24_parser, session)) thread1.start() thread2.start() thread1.join() thread2.join() if __name__ == \"__main__\": init_db() main() Multiprocessing \u0412 \u043a\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 parse_with_db_save . import multiprocessing from conn import get_session, init_db from parser import AbstractParser, LabirintParser, Book24Parser def parse_with_db_save(parser: AbstractParser): parsed_data = parser.parse() session = next(get_session()) for d in parsed_data: session.add(d) session.commit() def main(): blockchain_parser = LabirintParser() btc_parser = Book24Parser() process1 = multiprocessing.Process(target=parse_with_db_save, args=(blockchain_parser,)) process2 = multiprocessing.Process(target=parse_with_db_save, args=(btc_parser,)) process1.start() process2.start() process1.join() process2.join() if __name__ == \"__main__\": init_db() main() Asyncio \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. import os from dotenv import load_dotenv from sqlalchemy.ext.asyncio import create_async_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker from sqlalchemy.ext.asyncio import AsyncSession load_dotenv() engine = create_async_engine(os.environ[\"ASYNC_SQLALCHEMY_DATABASE_URL\"]) asyncSessionLocal = sessionmaker( class_=AsyncSession, autocommit=False, autoflush=False, bind=engine ) Base = declarative_base() async def init_db(): async with engine.begin() as conn: await conn.run_sync(Base.metadata.create_all) async def get_session(): async with asyncSessionLocal() as session: yield session \u0414\u0430\u043b\u0435\u0435, \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 Task \u0438 \u0434\u043e\u0436\u0434\u0435\u0442\u0441\u044f \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. async def parse_with_db_save(parser: AbstractParser, session: AsyncSession): parsed_data = await parser.async_parse() for d in parsed_data: session.add(d) await session.commit() async def main(): labirint_parser = LabirintParser() book24_parser = Book24Parser() session = await anext(get_session()) task1 = aio.create_task(parse_with_db_save(labirint_parser, session)) task2 = aio.create_task(parse_with_db_save(book24_parser, session)) await aio.gather(task1, task2) if __name__ == \"__main__\": aio.run(main()) Benchmark \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u0434 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c. import time import asyncio from parse_threading import main as threading_main from parse_multi import main as multi_main from parse_async import main as async_main from conn import init_db from functools import partial def benchmark(func, name): start_time = time.perf_counter() func() end_time = time.perf_counter() print(f\"{name} ended in {end_time - start_time:.4f} seconds\") if __name__ == \"__main__\": init_db() benchmark(threading_main, \"Threading\") benchmark(multi_main, \"Multiprocessing\") benchmark(partial(asyncio.run, async_main()), \"Asyncio\") \u0412\u044b\u0432\u043e\u0434 benchmark \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0442\u0430\u043a\u043e\u0439. Threading ended in 1.7869 seconds Multiprocessing ended in 1.9192 seconds Asyncio ended in 1.6669 seconds \u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u0430\u043c\u044b\u043c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c. \u042d\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0430\u0439\u0442\u043e\u0432 \u0431\u044b\u043b\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c, \u0438 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u0438 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. Threading \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u0435\u0435 \u0447\u0435\u043c asyncio, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0438\u0437-\u0437\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #2"},{"location":"lab-2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #2"},{"location":"lab-2/#_1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab-2/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1"},{"location":"lab-2/#_2","text":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 calculate_sum \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442 \u0447\u0430\u0441\u043b\u0430 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u0432 sum_multi \u0438 sum_async \u043d\u0435\u0442 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0430\u0433\u0440\u0443\u043c\u0435\u043d\u0442\u0430 result, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f total . def calculate_sum(start, end, result): total = 0 for i in range(start, end): total += i result.append(total)","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-2/#threading","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u043c \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u043e\u0442\u0440\u0435\u0437\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0414\u0430\u043b\u0435\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (10^5). \u041a\u0430\u0436\u0434\u044b\u0439 \u0447\u0430\u043d\u043a \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. \u0410 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a result , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. def main(): result = [] threads = [] chunk_size = 10**5 for i in range(0, 10**6, chunk_size): t = Thread(target=calculate_sum, args=(i+1, i+chunk_size+1, result)) threads.append(t) t.start() for t in threads: t.join() print(\"Result of sum:\", sum(result))","title":"Threading"},{"location":"lab-2/#multiprocessing","text":"\u0422\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043c\u044b \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (10^5). \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0443\u043b, \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0440\u0430\u0432\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0447\u0430\u043d\u043a\u043e\u0432. \u0414\u0430\u043b\u0435\u0435, \u0432 \u043f\u0443\u043b\u0435 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 calculate_sum \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a result . def main(): chunk_size = 10**5 pool = Pool(processes=10**6 // chunk_size) result = [pool.apply(calculate_sum, (i+1, i+chunk_size+1)) for i in range(0, 10**6, chunk_size)] print(\"Result of sum:\", sum(result))","title":"Multiprocessing"},{"location":"lab-2/#asyncio","text":"\u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c calculate_sum \u043a\u0430\u043a \u043a\u043e\u0440\u043e\u0442\u0438\u043d\u0443. \u0417\u0430\u0442\u0435\u043c, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0430\u043d\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c Task \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u043e\u0436\u0438\u0434\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0414\u0430\u043b\u0435\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): tasks = [] chunk_size = 10**5 for i in range(0, 10**6, chunk_size): task = asyncio.create_task(calculate_sum(i+1, i+chunk_size+1)) tasks.append(task) result = await asyncio.gather(*tasks) print(\"Result of sum:\", sum(result))","title":"Asyncio"},{"location":"lab-2/#benchmark","text":"\u041d\u0430\u043f\u0438\u0448\u0435\u043c benchmark \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0430\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434. def benchmark(func, name): start_time = time.perf_counter() func() end_time = time.perf_counter() print(f\"{name} ended in {end_time - start_time:.4f} seconds\") \u0414\u0430\u043b\u0435\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c benchmark \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430. if __name__ == \"__main__\": benchmark(threading_main, \"Threading\") benchmark(multi_main, \"Multiprocessing\") benchmark(partial(asyncio.run, async_main()), \"Asyncio\") \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435. Result of sum: 500000500000 Threading ended in 0.0294 seconds Result of sum: 500000500000 Multiprocessing ended in 0.1709 seconds Result of sum: 500000500000 Asyncio ended in 0.0272 seconds \u0421\u0430\u043c\u044b\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f multiprocessing .","title":"Benchmark"},{"location":"lab-2/#2_1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2"},{"location":"lab-2/#_3","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-2/#_4","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0441\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043a\u043d\u0438\u0433. class AbstractParser(ABC): base_url: str @abstractmethod def parse(self) -> list[Book]: ... @abstractmethod async def async_parse(self) -> list[Book]: ... \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0440\u0435\u0441\u0443\u0440\u0441\u0430. class BaseParser(AbstractParser): base_url: str def get_soup(self) -> BeautifulSoup: return BeautifulSoup(requests.get(self.base_url).text, \"html.parser\") async def async_get_soup(self) -> BeautifulSoup: async with aiohttp.ClientSession() as client: async with client.get(self.base_url) as resp: return BeautifulSoup(await resp.read(), \"html.parser\") def parse(self) -> list[Book]: return self._parse(self.get_soup()) async def async_parse(self) -> list[Book]: return self._parse(await self.async_get_soup()) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043a\u043d\u0438\u0433 \u0441 \u0441\u0430\u0439\u0442\u0430 \u041b\u0430\u0431\u0438\u0440\u0438\u0442 . class LabirintParser(BaseParser): def __init__(self): self.base_url = \"https://www.labirint.ru/books/\" def _parse(self, soup: BeautifulSoup): el = soup.find_all(\"div\", class_=\"product\", attrs={\"data-sgenre-name\": \"\u043a\u043d\u0438\u0433\u0430\"} ) parsed_books = [] for book in el: name = book[\"data-name\"] div_author = book.find(\"div\", class_=\"product-author\") if not div_author: continue author = div_author.find(\"a\")[\"title\"] description = book[\"data-first-genre-name\"] parsed_books.append( Book(name=name, author=author, description=description) ) return parsed_books \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043a\u043d\u0438\u0433 \u0441 \u0441\u0430\u0439\u0442\u0430 Book24 . class Book24Parser(BaseParser): def __init__(self): self.base_url = \"https://book24.ru/knigi-bestsellery/\" def _parse(self, soup: BeautifulSoup): el = soup.find_all(\"div\", class_=\"product-card__content\") parsed_books = [] for book in el: name = book.find(\"a\")[\"title\"] a_author = book.find(\"a\", class_=\"author-list__item smartLink\") if not a_author: continue author = a_author.text parsed_books.append( Book(name=name, author=author) ) return parsed_books","title":"\u041a\u043b\u0430\u0441\u0441 \u043f\u0430\u0440\u0435\u0441\u0440\u043e\u0432"},{"location":"lab-2/#threading_1","text":"\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. import threading from conn import get_session, init_db from parser import AbstractParser, LabirintParser, Book24Parser def parse_with_db_save(parser: AbstractParser, session): parsed_data = parser.parse() for d in parsed_data: session.add(d) session.commit() def main(): labirint_parser = LabirintParser() book24_parser = Book24Parser() session = next(get_session()) thread1 = threading.Thread(target=parse_with_db_save, args=(labirint_parser, session)) thread2 = threading.Thread(target=parse_with_db_save, args=(book24_parser, session)) thread1.start() thread2.start() thread1.join() thread2.join() if __name__ == \"__main__\": init_db() main()","title":"Threading"},{"location":"lab-2/#multiprocessing_1","text":"\u0412 \u043a\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 parse_with_db_save . import multiprocessing from conn import get_session, init_db from parser import AbstractParser, LabirintParser, Book24Parser def parse_with_db_save(parser: AbstractParser): parsed_data = parser.parse() session = next(get_session()) for d in parsed_data: session.add(d) session.commit() def main(): blockchain_parser = LabirintParser() btc_parser = Book24Parser() process1 = multiprocessing.Process(target=parse_with_db_save, args=(blockchain_parser,)) process2 = multiprocessing.Process(target=parse_with_db_save, args=(btc_parser,)) process1.start() process2.start() process1.join() process2.join() if __name__ == \"__main__\": init_db() main()","title":"Multiprocessing"},{"location":"lab-2/#asyncio_1","text":"\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. import os from dotenv import load_dotenv from sqlalchemy.ext.asyncio import create_async_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker from sqlalchemy.ext.asyncio import AsyncSession load_dotenv() engine = create_async_engine(os.environ[\"ASYNC_SQLALCHEMY_DATABASE_URL\"]) asyncSessionLocal = sessionmaker( class_=AsyncSession, autocommit=False, autoflush=False, bind=engine ) Base = declarative_base() async def init_db(): async with engine.begin() as conn: await conn.run_sync(Base.metadata.create_all) async def get_session(): async with asyncSessionLocal() as session: yield session \u0414\u0430\u043b\u0435\u0435, \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 Task \u0438 \u0434\u043e\u0436\u0434\u0435\u0442\u0441\u044f \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. async def parse_with_db_save(parser: AbstractParser, session: AsyncSession): parsed_data = await parser.async_parse() for d in parsed_data: session.add(d) await session.commit() async def main(): labirint_parser = LabirintParser() book24_parser = Book24Parser() session = await anext(get_session()) task1 = aio.create_task(parse_with_db_save(labirint_parser, session)) task2 = aio.create_task(parse_with_db_save(book24_parser, session)) await aio.gather(task1, task2) if __name__ == \"__main__\": aio.run(main())","title":"Asyncio"},{"location":"lab-2/#benchmark_1","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u0434 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c. import time import asyncio from parse_threading import main as threading_main from parse_multi import main as multi_main from parse_async import main as async_main from conn import init_db from functools import partial def benchmark(func, name): start_time = time.perf_counter() func() end_time = time.perf_counter() print(f\"{name} ended in {end_time - start_time:.4f} seconds\") if __name__ == \"__main__\": init_db() benchmark(threading_main, \"Threading\") benchmark(multi_main, \"Multiprocessing\") benchmark(partial(asyncio.run, async_main()), \"Asyncio\") \u0412\u044b\u0432\u043e\u0434 benchmark \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0442\u0430\u043a\u043e\u0439. Threading ended in 1.7869 seconds Multiprocessing ended in 1.9192 seconds Asyncio ended in 1.6669 seconds \u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u0430\u043c\u044b\u043c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c. \u042d\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0430\u0439\u0442\u043e\u0432 \u0431\u044b\u043b\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c, \u0438 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u0438 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. Threading \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u043c\u0435\u0434\u043b\u0435\u043d\u0435\u0435 \u0447\u0435\u043c asyncio, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0438\u0437-\u0437\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438.","title":"Benchmark"}]}